#!/usr/bin/env coffee

fs = require 'fs'
esprima = require 'esprima'
compiler = require 'compiler'
{ spawn } = require 'child_process'

argv = process.argv.splice 2

options =
  # our defaults:
  compile_only:    false,
  output_filename: null

args =
  "-c": { flag:   "compile_only",    help: "compile only, do not link." },
  "-o": { option: "output_filename", help: "name of the output file." }

files = []
for ai in [0..argv.length-1]
  if args[argv[ai]]?
    o = args[argv[ai]]
    if o.flag?
      options[o.flag] = true
    else if o.option?
      options[o.option] = argv[++ai]
  else
    # end of options signals the rest of the array is files
    files = argv.splice ai

if files.length is 0
    console.log 'Usage:';
    console.log '   ejs [options] file1.js file2.js file.js ...'
    process.exit 1


files.forEach (filename) ->
    content = fs.readFileSync filename, 'utf-8'
    parse_tree = esprima.parse content
    compiled_module = compiler.compile parse_tree

    ll_filename = "/tmp/#{filename}.ll"
    bc_filename = "/tmp/#{filename}.bc"
    bc_opt_filename = "/tmp/#{filename}.bc.opt"
    ll_opt_filename = "/tmp/#{filename}.ll.opt"
    s_filename = "/tmp/#{filename}.s"
    o_filename = "#{filename}.o"
    exe_filename = "#{filename}.exe"

    llvm_as_args = ["-o=#{bc_filename}", ll_filename]
    opt_args = ["-O3", "-mem2reg", "-o=#{bc_opt_filename}", bc_filename]
    llvm_dis_args = ["-o=#{ll_opt_filename}", bc_opt_filename]
    llc_args = ["-march=x86-64", "-O2", "-o=#{s_filename}", ll_opt_filename]

    clang_args = ["-o", options.output_filename || (if options.compile_only then o_filename else exe_filename), s_filename]
    if options.compile_only
      clang_args.unshift "-c"
    else
      clang_args.push "../runtime/libecho.a"

    compiled_module.writeToFile ll_filename
    llvm_as = spawn "llvm-as", llvm_as_args
    llvm_as.stderr.on "data", (data) -> console.log "#{data}"
    llvm_as.on "exit", (code) ->
      opt = spawn "opt", opt_args
      opt.stderr.on "data", (data) -> console.log "#{data}"
      opt.on "exit", (code) ->
        llvm_dis = spawn "llvm-dis", llvm_dis_args
        llvm_dis.stderr.on "data", (data) -> console.log "#{data}"
        llvm_dis.on "exit", (code) ->
          llc = spawn "llc", llc_args
          llc.stderr.on "data", (data) -> console.log "#{data}"
          llc.on "exit", (code) ->
            clang = spawn "clang", clang_args
            clang.stderr.on "data", (data) -> console.log "#{data}"
            clang.on "exit", (code) ->
              console.log "done."
