// I was bored, and LLJS rules.
//
// ultra stupidly simple mark/sweep GC
//
// TODO:
// 1. figure out some property magic so you can define struct types as you normally would and they magically get gc'ed
// 2. stop malloc/free'ing individual objects.
// 3. (depends on 2) get rid of the "alloced" object
// 4. get rid of the field bitmap and replace with something more capable
// 5. why not, let's make this thing generational (card marking, anyone?)
// 6.          and add weakrefs and finalizers
// 7.          and.. and.. and..
//

extern console;
extern Object;

typedef byte *malloc_ty(uint);
typedef void free_ty(byte*);

let memory = require('memory');
let malloc_ty malloc = (malloc_ty)(memory.malloc);
let free_ty free = (free_ty)(memory.free);

const u8 GCTagObject = 1;
const u8 GCTagInt32  = 2;
const u8 GCTagDouble = 3;

let roots = [];
let alloced = Object.create(null);

struct GCBitmap {
  u32 bitmap;
}

struct GCType {
  GCBitmap bitmap;
  u8 num_fields;
  u8* field_offsets;
  u16 instance_size;

  function GCType (fieldTypeList) {
    let u32 bitmap = 0;
    let u16 size = sizeof(GCObject);
    let u8 num_fields = (u8)(fieldTypeList.length);

    if (num_fields > 31)
      throw "gc bitmaps only allow 31 fields";

    this->field_offsets = new u8[num_fields];
    this->field_offsets[0] = sizeof(GCObject); // our object header

    for (let u8 i = 0, e = num_fields; i < e; i ++) {
      let u8 field_size = 0;

      switch (fieldTypeList[i]) {
      case GCTagObject:
	field_size = sizeof (GCType*);
	bitmap |= 1 << i;
	break;
      case GCTagInt32:
	field_size = sizeof (i32);
	break;
      case GCTagDouble:
	field_size = sizeof (double);
	break;
      }

      if (i < (e - 1))
	this->field_offsets[i+1] = this->field_offsets[i] + field_size;

      size += field_size;
    }

    this->bitmap.bitmap = bitmap;
    this->num_fields = num_fields;
    this->instance_size = size;
  }
}

struct GCObject {
  GCType *type;
  u8 marked;
  // fields come after
}


function GCType* RegisterGCType (fieldTypeList) {
  return new GCType (fieldTypeList);
}

function GCObject* AllocGCType (GCType* type) {
  let GCObject* obj = (GCObject*)(malloc(type->instance_size));
  obj->type = type;
  alloced[obj] = obj;
  return obj;
}

function void StoreObject (GCObject* obj, u8 field, GCObject* value)
{
  let GCType* type = obj->type;
  if (field >= type->num_fields)
    throw "Field index out of range";

  if ((type->bitmap & (1 << field)) == 0)
    throw "Attempting to store GCObject in non-GCObject field"

  // this rather complicated casting mess exists because I couldn't get it all to work in a single expression.
  // I'm not entirely convinced this was ljc's fault - I may just be stupid.
  let u8* objp = (u8*)(obj);
  let u8* fieldp = objp + type->field_offsets[field]
  let GCObject** fieldobjp = (GCObject**)(fieldp);
  *fieldobjp = value;
}

function void StoreInt32 (GCObject* obj, u8 field, i32 value)
{
  let GCType* type = obj->type;
  if (field >= type->num_fields)
    throw "Field index out of range";

  if ((type->bitmap & (1 << field)) == 1)
    throw "Attempting to store non-GCObject in GCObject field"

  // this rather complicated casting mess exists because I couldn't get it all to work in a single expression.
  // I'm not entirely convinced this was ljc's fault - I may just be stupid.
  let u8* objp = (u8*)(obj);
  let u8* fieldp = objp + type->field_offsets[field]
  let i32* fieldi32p = (i32*)(fieldp);
  *fieldi32p = value;
}

function void StoreDouble (GCObject* obj, u8 field, double value)
{
  let GCType* type = obj->type;
  if (field >= type->num_fields)
    throw "Field index out of range";

  if ((type->bitmap & (1 << field)) == 1)
    throw "Attempting to store non-GCObject in GCObject field"

  // this rather complicated casting mess exists because I couldn't get it all to work in a single expression.
  // I'm not entirely convinced this was ljc's fault - I may just be stupid.
  let u8* objp = (u8*)(obj);
  let u8* fieldp = objp + type->field_offsets[field]
  let double* fielddoublep = (double*)(fieldp);
  *fielddoublep = value;
}

function void AddGCRoot (GCObject* obj)
{
  roots.push (obj);
  console.log ("root added = " + roots[roots.length - 1]);
}

function void DumpObject(GCObject* obj)
{
  let GCType *type = obj->type;
  console.log ("  pointer = " + obj);
  console.log ("  type = " + type);
  let u32 bitmap = type->bitmap.bitmap;
  for (let u8 field = 0; field < type->num_fields; field ++) {
    if (bitmap & 1) {
      let GCObject* objref;
      let u8* objp = (u8*)(obj);
      let u8* fieldp = objp + type->field_offsets[field]
      let GCObject** fieldobjp = (GCObject**)(fieldp);
      console.log ("    objref in field[" + field + "] = " + *fieldobjp);
    }
    bitmap >>>= 1;
  }
}

function void DumpType(GCType* type)
{
  console.log ("  pointer = " + type);
  console.log ("  bitmap = " + type->bitmap);
  console.log ("  num_fields = " + type->num_fields);
  console.log ("  instance_size = " + type->instance_size);
  for (let u8 i = 0; i < type->num_fields; i ++)
    console.log ("    field_offset[" + i + "] = " + type->field_offsets[i]);
}

let mark_stack;

function ScanObject(GCObject* gcobj)
{
  let GCType* type = gcobj->type;

  let u32 bitmap = type->bitmap.bitmap;

  console.log ("marking object " + gcobj);
  gcobj->marked = 1;

  // exit early if we can
  if (bitmap === 0)
    return;

  for (let u8 field = 0; field < type->num_fields; field ++) {
    if (bitmap & 1) {
      let u8* objp = (u8*)(gcobj);
      let u8* fieldp = objp + type->field_offsets[field]
      let GCObject** fieldobjp = (GCObject**)(fieldp);
      let GCObject* objref = *fieldobjp;
      if (objref != 0 && objref->marked == 0)
	mark_stack.push (*fieldobjp);
    }
    bitmap >>= 1;
  }
}

function void GCCollect()
{
  console.log ("GCCollect");
  let obj;
  // clear all marked bits
  for (obj in alloced) {
    let GCObject* gcobj = (GCObject*)(obj);
    gcobj->marked = 0;
  }

  mark_stack = [];
  // prime the mark stack with our roots
  roots.forEach ( function (obj) { mark_stack.push (obj); } );

  console.log ("mark stack.length = ", mark_stack.length);

  while (obj = mark_stack.pop()) {
    let GCObject* gcobj = (GCObject*)(obj);
    if (gcobj->marked)
      continue;
    ScanObject(gcobj);
  }

  // free everything that isn't marked
  for (obj in alloced) {
    let GCObject* gcobj = (GCObject*)(obj);
    if (!gcobj->marked) {
      console.log ("collecting object " + gcobj);
      delete alloced[obj];
      free ((byte*)(gcobj));
    }
  }
}

function void GCDumpLiveObjects()
{
  let keys = Object.keys(alloced);
  console.log ("there are " + keys.length + " live objects");
}

//////
//////
// some test code
//////
//////

// a type with 2 object fields, we'll call it Rect
let GCType* Rect_type = RegisterGCType ([GCTagObject, GCTagObject]);
// a type with no object fields at all (we'll call it "Point")
let GCType* Point_type = RegisterGCType ([GCTagInt32, GCTagInt32]);
// a type with 1 non-object field followed by an object field.  we'll call it Scaled
let GCType* Scaled_type = RegisterGCType ([GCTagDouble, GCTagObject]);

console.log ("Rect_type:");
DumpType(Rect_type);

console.log ("Point_type:");
DumpType(Point_type);

console.log ("Scaled_type:");
DumpType(Scaled_type);

// create a few of points.
let GCObject* point1 = AllocGCType (Point_type); // point1 = new Point (10, 10)
StoreInt32 (point1, (u8)(0), (i32)(10));
StoreInt32 (point1, (u8)(1), (i32)(10));

let GCObject* point2 = AllocGCType (Point_type); // point2 = new Point (10, 10)
StoreInt32 (point2, (u8)(0), (i32)(10));
StoreInt32 (point2, (u8)(1), (i32)(10));

let GCObject* point3 = AllocGCType (Point_type); // point3 = new Point (20, 20)
StoreInt32 (point2, (u8)(0), (i32)(20));
StoreInt32 (point2, (u8)(1), (i32)(20));

let GCObject* scaled_point = AllocGCType (Scaled_type); // scaled_point = new Scaled (2, point2)
StoreDouble (scaled_point, (u8)(0), (double)(2));
StoreObject (scaled_point, (u8)(1), point2);

let GCObject* rect = AllocGCType (Rect_type); // rect = new Rect (point1, scaled_point)
StoreObject (rect, (u8)(0), point1);
StoreObject (rect, (u8)(1), scaled_point);

console.log ("rect object");
DumpObject(rect);

console.log ("scaled object");
DumpObject(scaled_point);

console.log ("point3 object");
DumpObject(point3);

console.log ("point2 object");
DumpObject(point2);

console.log ("point1 object");
DumpObject(point1);

// we'll set rect as our sole gc root
AddGCRoot(rect);

GCDumpLiveObjects();

// then run a collection, which should collect point3 above
GCCollect();

GCDumpLiveObjects();